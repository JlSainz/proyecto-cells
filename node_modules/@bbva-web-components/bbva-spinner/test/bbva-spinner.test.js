import { html, fixture, assert, fixtureCleanup } from '@open-wc/testing';

import '../bbva-spinner.js';

suite('bbva-spinner', () => {
  teardown(() => fixtureCleanup());

  suite('withMask property', () => {
    let el;
    let figure;

    setup(async () => {
      el = await fixture(
        html`
          <bbva-spinner with-mask></bbva-spinner>
        `,
      );
      await el.updateComplete;
      figure = el.shadowRoot.querySelector('figure');
    });

    test('should set clip-path when true', async () => {
      const clipPath = el.shadowRoot.querySelector('figure svg g').getAttribute('clip-path');
      assert.notEqual(clipPath, '');
    });

    suite('a11y', () => assert.isAccessible(el));

    suite('Semantic Dom', () => {
      test('DOM - Structure test', () => {
        assert.dom.equalSnapshot(el, { ignoreAttributes: ['style'] });
      });

      test('SHADOW DOM - Structure test', () => {
        assert.shadowDom.equalSnapshot(el, { ignoreAttributes: ['id'] });
      });

      test('LIGHT DOM - Structure test', () => {
        assert.lightDom.equalSnapshot(el);
      });
    });
  });

  suite('size property', () => {
    let el;
    let figure;

    setup(async () => {
      el = await fixture(
        html`
          <bbva-spinner size="200"></bbva-spinner>
        `,
      );
      await el.updateComplete;
      figure = el.shadowRoot.querySelector('figure');
    });

    test('setting size to element assigns width to figure', () => {
      const sizeWidthPx = figure.style.getPropertyValue('width');
      assert.equal(sizeWidthPx, `${el.size}px`);
    });

    test('width attribute is not set if "size" is not set to a number', async () => {
      el.size = null;
      await el.updateComplete;
      assert.notOk(
        figure.style.getPropertyValue('width'),
        `setting "size" as null does not set width`,
      );

      el.size = undefined;
      await el.updateComplete;
      assert.notOk(
        figure.style.getPropertyValue('width'),
        `setting "size" as undefined does not set width`,
      );

      el.size = 0;
      await el.updateComplete;
      assert.equal(
        parseInt(getComputedStyle(figure).width, 10),
        el.size,
        'setting "size" to 0 sets width to 0px',
      );
    });

    suite('a11y', () => assert.isAccessible(el));

    suite('Semantic Dom', () => {
      test('DOM - Structure test', () => {
        assert.dom.equalSnapshot(el, { ignoreAttributes: ['style'] });
      });

      test('SHADOW DOM - Structure test', () => {
        assert.shadowDom.equalSnapshot(el, { ignoreAttributes: ['id'] });
      });

      test('LIGHT DOM - Structure test', () => {
        assert.lightDom.equalSnapshot(el);
      });
    });
  });
});
