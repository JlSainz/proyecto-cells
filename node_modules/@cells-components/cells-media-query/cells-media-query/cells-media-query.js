/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
import { LitElement } from 'lit-element';
/**
`cells-media-query` can be used to data bind to a CSS media query.
The `query` property is a bare CSS media query.
The `query-matches` property is a boolean representing whether the page matches that media query.

It's directly based on Polymer Iron Media Query, see: [Documentation](https://www.webcomponents.org/element/@polymer/iron-media-query),
  [Demo](https://www.webcomponents.org/element/@polymer/iron-media-query/demo/demo/index.html).

Usage examples:
```html
<cells-media-query query="(min-width: 600px)"></cells-media-query>
```

```js
class SampleElement extends LitElement {
  render() {
    return html`
      <cells-media-query query="(min-width: 600px)"></cells-media-query>
    `;
  }
}
customElements.define('sample-element', SampleElement);
```

* @customElement
* @demo demo/index.html
* @extends {LitElement}
*/
class cellsMediaQuery extends LitElement {

  static get is() {
    return 'cells-media-query';
  }

  static get properties() {
    return {
      /**
       * The CSS media query to evaluate.
       */
      query: {
        type: String
      },

      /**
       * If true, the query attribute is assumed to be a complete media query
       * string rather than a single media feature.
       */
      full: {
        type: Boolean
      }
    }
  }

  constructor() {
    super();
    this.queryMatches = false;
    this.full = false;
    this._boundMQHandler = this.queryHandler.bind(this);
    this._mq = null;
  }

  updated(changedProps) {
    if (changedProps.has('query')) {
      this.queryChanged();
    }
  }

  createRenderRoot() {
    return this;
  }

  connectedCallback() {
    super.connectedCallback();
    this.style.display = 'none';
    this.queryChanged();
  }

  disconnectedCallback() {
    this._remove();
  }

  _add() {
    if (this._mq) {
      this._mq.addListener(this._boundMQHandler);
    }
  }

  _remove() {
    if (this._mq) {
      this._mq.removeListener(this._boundMQHandler);
    }
    this._mq = null;
  }

  queryChanged() {
    this._remove();
    let query = this.query;
    if (!query) {
      return;
    }
    if (!this.full && query[0] !== '(') {
      query = '(' + query + ')';
    }
    this._mq = window.matchMedia(query);
    this._add();
    this.queryHandler(this._mq);
  }

  queryHandler(mq) {
    const oldValue = this.queryMatches;
    this.queryMatches = mq.matches;
    if (oldValue !== this.queryMatches) {
      /**
       * Fired when query matching value changes
       * @event query-matches-changed
       */
      this.dispatchEvent(new CustomEvent('query-matches-changed', {
        detail: {
          value: this.queryMatches
        }
      }));
    }
  }
}

customElements.define(cellsMediaQuery.is, cellsMediaQuery);
