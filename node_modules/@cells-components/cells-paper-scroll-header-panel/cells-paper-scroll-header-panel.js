import { LitElement, html, } from 'lit-element';
import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import { CellsResizableMixin } from '@cells-components/cells-resizable-mixin/cells-resizable-mixin.js';
import styles from './cells-paper-scroll-header-panel-styles.js';

/*
`cells-paper-scroll-header-panel` contains a header section and a content section.  The
header is initially on the top part of the view but it scrolls away with the
rest of the scrollable content.  Upon scrolling slightly up at any point, the
header scrolls back into view.  This saves screen space and allows users to
access important controls by easily moving them back to the view.

__Important:__ The `cells-paper-scroll-header-panel` will not display if its parent does not have a height.

```html
<cells-paper-scroll-header-panel>
  <sample-toolbar slot="header-content">
  </sample-toolbar>
  <div class="content" slot="main-content">
  <sample-content size="100"></sample-content>
  </div>
</cells-paper-scroll-header-panel>
```

### Styling

The following custom properties are available for styling:

### Custom Properties
| Custom Property                                            | Selector         | CSS Property | Value               |
| ---------------------------------------------------------- | ---------------- | ------------ | ------------------- |
| --cells-paper-scroll-header-panel__config-margin-top       | #mainContainer   | margin-top   | `No fallback value` |
| --cells-paper-scroll-header-panel-main-container-overflow-scrolling | #mainContainer | -webkit-overflow-scrolling  |  touch |
| --cells-paper-scroll-header-panel-header-container-z-index | #headerContainer | z-index      |  1                  |

@demo demo/index.html
@hero cells-paper-scroll-header-panel.png
*/
class CellsPaperScrollHeaderPanel extends CellsResizableMixin(LitElement) {
  /**
    * Fired when the content has been scrolled.
    *
    * @event content-scroll
    */

  /**
    * Fired when the header is transformed.
    *
    * @event paper-header-transform
    */

  static get is() {
    return 'cells-paper-scroll-header-panel';
  }

  static get properties() {
    return {
      /**
       * If true, the header's height will condense to `condensedHeaderHeight`
       * as the user scrolls down from the top of the content area.
       */
      condenses: {
        type: Boolean
      },

      /**
       * If true, no cross-fade transition from one background to another.
       */
      noDissolve: {
        type: Boolean,
        attribute: 'no-dissolve'
      },

      /**
       * If true, the header doesn't slide back in when scrolling back up.
       */
      noReveal: {
        type: Boolean,
        attribute: 'no-reveal'
      },

      /**
       * If true, the header is fixed to the top and never moves away.
       */
      fixed: {
        type: Boolean
      },

      /**
       * If true, the condensed header is always shown and does not move away.
       */
      keepCondensedHeader: {
        type: Boolean,
        attribute: 'keep-condensed-header'
      },

      /**
       * The height of the header when it is at its full size.
       *
       * By default, the height will be measured when it is ready.  If the height
       * changes later the user needs to either set this value to reflect the
       * new height or invoke `measureHeaderHeight()`.
       */
      headerHeight: {
        type: Number,
        attribute: 'header-height'
      },

      /**
       * The height of the header when it is condensed.
       *
       * By default, `condensedHeaderHeight` is 1/3 of `headerHeight` unless
       * this is specified.
       */
      condensedHeaderHeight: {
        type: Number,
        attribute: 'condensed-header-height'
      },

      /**
       * By default, the top part of the header stays when the header is being
       * condensed.  Set this to true if you want the top part of the header
       * to be scrolled away.
       */
      scrollAwayTopbar: {
        type: Boolean,
        attribute: 'scroll-away-topbar'
      },

      configurationsNumber: {
        type: Number,
        attribute: 'configurations-number'
      },

      transitionStart: {
        type: Boolean,
        attribute: 'transition-start'
      }
    };
  }

  constructor() {
    super();
    this.condenses = false;
    this.noDissolve = false;
    this.noReveal = false;
    this.fixed = false;
    this.keepCondensedHeader = false;
    this.condensedHeaderHeight = 0;
    this.scrollAwayTopbar = false;
    this.headerState = 0;
    this._defaultCondsensedHeaderHeight = 0;
    this.configurationsNumber = 0;
    this.transitionStart = false;
    this._y = 0;
    this._prevScrollTop = 0;
  }

  updated(changedProps) {
    if (changedProps.has('headerHeight') || changedProps.has('condensedHeaderHeight') || changedProps.has('fixed')) {
      this._setup();
    }
    if (changedProps.has('condensedHeaderHeight')) {
      this._condensedHeaderHeightChanged(this.condensedHeaderHeight);
    }
    if (changedProps.has('headerHeight') || changedProps.has('condensedHeaderHeight')) {
      this._headerHeightChanged(this.headerHeight);
    }
    if (changedProps.has('condenses')) {
      this._condensesChanged();
    }
    if (changedProps.has('configurationsNumber')) {
      this._checkConfigurationZone(this.configurationsNumber);
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.addEventListener('cells-resize', this.measureHeaderHeight);
    this.addEventListener('track', this._swipeMain);
    setTimeout(() => this.measureHeaderHeight(), 100);
  }

  static get styles() {
    return [
      styles,
      getComponentSharedStyles('cells-paper-scroll-header-panel-shared-styles')
    ];
  }

  render() {
    return html`
      <div id="headerContainer">
        <div class="bg-container">
          <div id="condensedHeaderBg"></div>
          <div id="headerBg"></div>
        </div>
        <slot id="headerContent" name="header-content"></slot>
      </div>
      <slot id="extraContent" name="extra-content"></slot>
      <div id="mainContainer" @scroll="${this._scroll}">
        <slot id="mainContent" name="main-content"></slot>
      </div>
    `;
  }

  /**
    * Returns the header element.
    */
  get header() {
    const header = this.shadowRoot.querySelector('#headerContent');
    return header.assignedNodes()[0];
  }

  /**
    * Returns the content element.
    */
  get content() {
    const content = this.shadowRoot.querySelector('#mainContent');
    return content.assignedNodes()[0];
  }

  /**
    * Returns the scrollable element.
    */
  get scroller() {
    return this.shadowRoot.querySelector('#mainContainer');
  }

  get headerMaxDelta() {
    return this.keepCondensedHeader ? this.headerMargin : this.headerHeight;
  }

  get headerMargin() {
    return this.headerHeight - this.condensedHeaderHeight;
  }

  get HEADER_STATE_EXPANDED() {
    return 0;
  }

  get HEADER_STATE_HIDDEN() {
    return 1;
  }

  get HEADER_STATE_CONDENSED() {
    return 2;
  }

  get HEADER_STATE_INTERPOLATED() {
    return 3;
  }

  _checkConfigurationZone(configurationsNumber) {
    if (configurationsNumber && configurationsNumber > 0) {
      let margin = 120;
      if (configurationsNumber > 3 && configurationsNumber <= 6) {
        margin = margin * 2;
      } else if (configurationsNumber > 6 && configurationsNumber <= 9) {
        margin = margin * 3;
      }
      this.style.setProperty('--cells-paper-scroll-header-panel__config-margin-top', `-${margin}px`);
    }
  }

  /**
    * Invoke this to tell `cells-paper-scroll-header-panel` to re-measure the header's height.
    */
  measureHeaderHeight() {
    let header = this.header;
    if (header && header.offsetHeight && this.headerHeight !== 0) {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          this.headerHeight = header.offsetHeight;
        });
      });
    }
  }

  /**
    * Scroll to a specific y coordinate.
    *
    * @method scroll
    * @param {number} top The coordinate to scroll to, along the y-axis.
    * @param {boolean} smooth true if the scroll position should be smoothly adjusted.
    */
  scroll(top, smooth) {
    // the scroll event will trigger _updateScrollState directly,
    // However, _updateScrollState relies on the previous `scrollTop` to update the states.
    // Calling _updateScrollState will ensure that the states are synced correctly.

    if (smooth) {
      // TODO(blasten): use CSS scroll-behavior once it ships in Chrome.
      const easingFn = function easeOutQuad(t, b, c, d) {
        t /= d;
        return -c * t * (t - 2) + b;
      };
      const animationId = Math.random();
      const duration = 200;
      const startTime = Date.now();
      const currentScrollTop = this.scroller.scrollTop;
      const deltaScrollTop = top - currentScrollTop;

      this._currentAnimationId = animationId;

      (function updateFrame() {
        const now = Date.now();
        const elapsedTime = now - startTime;

        if (elapsedTime > duration) {
          this.scroller.scrollTop = top;
          this._updateScrollState(top);
        } else if (this._currentAnimationId === animationId) {
          this.scroller.scrollTop = easingFn(elapsedTime, currentScrollTop, deltaScrollTop, duration);
          requestAnimationFrame(updateFrame.bind(this));
        }

      }).call(this);

    } else {
      this.scroller.scrollTop = top;
      this._updateScrollState(top);
    }
  }

  /**
    * Condense the header.
    *
    * @method condense
    * @param {boolean} smooth true if the scroll position should be smoothly adjusted.
    */
  condense(smooth) {
    if (this.condenses && !this.fixed && !this.noReveal) {
      switch (this.headerState) {
        case 1:
          this.scroll(this.scroller.scrollTop - (this.headerMaxDelta - this.headerMargin), smooth);
          break;
        case 0:
        case 3:
          this.scroll(this.headerMargin, smooth);
          break;
      }
    }
  }

  /**
    * Scroll to the top of the content.
    *
    * @method scrollToTop
    * @param {boolean} smooth true if the scroll position should be smoothly adjusted.
    */
  scrollToTop(smooth) {
    this.scroll(0, smooth);
  }

  _headerHeightChanged(headerHeight) {
    if (this._defaultCondsensedHeaderHeight !== null) {
      this._defaultCondsensedHeaderHeight = Math.round(headerHeight * 1 / 3);
      this.condensedHeaderHeight = this._defaultCondsensedHeaderHeight;
    }
  }

  _condensedHeaderHeightChanged(condensedHeaderHeight) {
    if (condensedHeaderHeight) {
      // a user custom value
      if (this._defaultCondsensedHeaderHeight !== condensedHeaderHeight) {
        // disable the default value
        this._defaultCondsensedHeaderHeight = null;
      }
    }
  }

  _condensesChanged() {
    this._updateScrollState(this.scroller.scrollTop);
    this._condenseHeader(null);
  }

  _setup() {
    let s = this.scroller.style;
    s.paddingTop = this.fixed ? '' : this.headerHeight + 'px';
    s.top = this.fixed ? this.headerHeight + 'px' : '';

    if (this.fixed) {
      this._setHeaderState(0);
      this._transformHeader(null);
    } else {
      switch (this.headerState) {
        case 1:
          this._transformHeader(this.headerMaxDelta);
          break;
        case 2:
          this._transformHeader(this.headerMargin);
          break;
      }
    }
  }

  _transformHeader(y) {
    this._translateY(this.shadowRoot.querySelector('#headerContainer'), -y);

    if (this.condenses) {
      this._condenseHeader(y);
    }

    this.dispatchEvent(new CustomEvent('paper-header-transform', {
      bubbles: true,
      composed: true,
      detail: {
        y: y,
        height: this.headerHeight,
        condensedHeight: this.condensedHeaderHeight
      }
    }));
  }

  /* eslint-disable */
  _condenseHeader(y) {

    const reset = (y === null);

    // adjust top bar in paper-header so the top bar stays at the top
    if (!this.scrollAwayTopbar && this.header && this.header.$ && this.header.shadowRoot.querySelector('#topBar')) {
      this._translateY(this.header.shadowRoot.querySelector('#topBar'),
        reset ? null : Math.min(y, this.headerMargin));
    }

    // transition header bg
    if (!this.noDissolve) {
      this.shadowRoot.querySelector('#headerBg').style.opacity = reset ? '' :
        ((this.headerMargin - y) / this.headerMargin);
    }

    // adjust header bg so it stays at the center
    this._translateY(this.shadowRoot.querySelector('#headerBg'), reset ? null : y / 2);

    // transition condensed header bg
    if (!this.noDissolve) {
      this.shadowRoot.querySelector('#condensedHeaderBg').style.opacity = reset ? '' :
        (y / this.headerMargin);

      // adjust condensed header bg so it stays at the center
      this._translateY(this.shadowRoot.querySelector('#condensedHeaderBg'), reset ? null : y / 2);
    }
  }
  /* eslint-enable */

  _translateY(node, y) {
    node.style.transform = (y === null) ? '' : `translate3d(0, ${y}px, 0)`;
    // this.transform((y === null) ? '' : `translate3d(0, ${y}px, 0)`, node);
  }

  showConfigurations(isVisible) {
    const main = this.shadowRoot.querySelector('#mainContainer');
    const visible = (this.scroller.scrollTop === 0 && isVisible);

    this.transitionStart = (main.classList.contains('configurationVisible') && visible === false);

    if (this.transitionStart === true) {
      document.body.addEventListener('touchmove', this._stopIt);
    } else {
      document.body.removeEventListener('touchmove', this._stopIt);
    }

    main.classList.toggle('configurationVisible', visible);
  }

  _swipeMain(e) {
    if (e.detail.state === 'start') {
      if (this.configurationsNumber > 0) {
        var isVisible = (e.detail.dy >= 0);
        this.showConfigurations(isVisible);
      } else {
        document.body.removeEventListener('touchmove', this._stopIt);
      }
    }
  }

  _stopIt(e) {
    e.preventDefault();
    e.stopPropagation();
  }

  /** @param {Event=} event */
  _scroll() {
    this._main = this._main || this.shadowRoot.querySelector('#mainContainer');
    this._isConfigurationVisible = this._isConfigurationVisible || this._main.classList.contains('configurationVisible');

    if (this.header && !this._isConfigurationVisible && this.transitionStart === false) {
      this._doScroll();
    }
  }

  _doScroll() {
    let scrollPosition = this.scroller.scrollTop;
    this._updateScrollState(scrollPosition);

    const contentScrollObj = {
      target: this._scroller = this._scroller || this.scroller,
      scrollPosition: scrollPosition,
    };

    this.dispatchEvent(new CustomEvent('content-scroll', {
      bubbles: true,
      cancelable: false,
      composed: true,
      detail: contentScrollObj,
    }));
  }

  _updateScrollState(scrollTop) {
    const deltaScrollTop = scrollTop - this._prevScrollTop;
    let y = Math.max(0, (this.noReveal) ? scrollTop : this._y + deltaScrollTop);
    if (y > this.headerMaxDelta) {
      y = this.headerMaxDelta;

      if (this.keepCondensedHeader) {
        this._setHeaderState(2);
      } else {
        this._setHeaderState(1);
      }
    } else if (this.condenses && scrollTop >= this.headerMargin) {
      y = Math.max(y, this.headerMargin);
      this._setHeaderState(2);
    } else if (y === 0) {
      this._setHeaderState(0);
    } else {
      this._setHeaderState(3);
    }

    if (!this.fixed && y !== this._y) {
      this._transformHeader(y);
    }

    this._prevScrollTop = Math.max(scrollTop, 0);
    this._y = y;
  }

  _setHeaderState(value) {
    /**
     * The state of the header. Depending on the configuration and the `scrollTop` value,
     * the header state could change to
     *      Polymer.CellsPaperScrollHeaderPanel.HEADER_STATE_EXPANDED
     *      Polymer.CellsPaperScrollHeaderPanel.HEADER_STATE_HIDDEN
     *      Polymer.CellsPaperScrollHeaderPanel.HEADER_STATE_CONDENSED
     *      Polymer.CellsPaperScrollHeaderPanel.HEADER_STATE_INTERPOLATED
     */
    this.headerState = value;
    this.dispatchEvent(new CustomEvent('header-state-changed', {
      detail: {
        value: this.headerState
      }
    }));
  }
}

window.customElements.define(CellsPaperScrollHeaderPanel.is, CellsPaperScrollHeaderPanel);
