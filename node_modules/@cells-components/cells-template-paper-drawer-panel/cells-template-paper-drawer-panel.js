import { LitElement, html, } from 'lit-element';
import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import { CellsTemplateAnimationMixin, CellsTemplateAnimationMixinStyles } from '@cells-components/cells-template-animation-mixin/cells-template-animation-mixin.js'
import '@cells-components/cells-app-drawer/cells-app-drawer.js';
import '@cells-components/cells-paper-scroll-header-panel/cells-paper-scroll-header-panel.js';
import styles from './cells-template-paper-drawer-panel-styles.js';
/**
## A set of zones elements for your template. It includes:

`<cells-template-paper-drawer-panel>` contains a drawer panel and a main panel. The drawer and the main panel are side-by-side with drawer on the left.

  ```app__header``` - A container element for top app.

  ```app__main``` - A container element main content and general manager scroll.

  ```app__footer``` - A container element for bottom app.

  ```app__complementary``` - A container element for drawer. [```Navigation drawer*```](https://www.google.com/design/spec/patterns/navigation-drawer.html)

  ```app__overlay``` - A container element for overlay all content.

  ```app__transactional``` - A container element that positions transverse layers.

[__*The navigation drawer slides in from the left and contains the navigation destinations for your app.__](https://www.google.com/design/spec/patterns/navigation-drawer.html)

Example cells context: *(view demo for declarative app)*
```html
<cells-template-paper-drawer-panel></cells-template-paper-drawer-panel>

<cells-template-paper-drawer-panel right-drawer drawer-width="300px"></cells-template-paper-drawer-panel>
```
## Styling

The following custom properties are available for styling:

### Custom Properties
| Custom Property                                          | Selector                                                       | CSS Property     | Value                                                    |
| -------------------------------------------------------- | -------------------------------------------------------------- | ---------------- | -------------------------------------------------------- |
| --cells-template-paper-drawer-panel-footer-height        | :host([footer-fixed]) > --cells-paper-scroll-header-container: | padding-bottom   |  60px                                                    |
| --cells-template-paper-drawer-panel-footer-bg-color      | :host([has-footer]) .app__footer                               | background-color |  ![#fff](https://placehold.it/15/fff/000000?text=+) #fff |
| --cells-template-paper-drawer-panel-footer-height        | :host([has-footer]) .app__footer                               | height           |  60px                                                    |
| --cells-template-paper-drawer-panel-section-zindex       | .app__section                                                  | z-index          |  0                                                       |
| --cells-template-paper-drawer-panel-section-bg           | .app__section                                                  | background-color |  ![#fff](https://placehold.it/15/fff/000000?text=+) #fff |
| --cells-template-paper-drawer-panel-header-zindex        | .app__header                                                   | z-index          |  0                                                       |
| --cells-template-paper-drawer-panel-main-padding-top     | .app__main                                                     | padding-top      |  0                                                       |
| --cells-template-paper-drawer-panel-main-padding-bottom  | .app__main                                                     | padding-bottom   |  0                                                       |
| --cells-template-paper-drawer-panel-complementary-width  | .app__complementary                                            | width            |  100%                                                    |
| --cells-template-paper-drawer-panel-complementary-zindex | .app__complementary                                            | z-index          |  0                                                       |
| --cells-template-paper-drawer-panel-overlay-zindex       | .app__overlay                                                  | z-index          |  0                                                       |
| --cells-template-paper-drawer-panel-transactional-zindex | .app__transactional                                            | z-index          |  0                                                       |

 *
 * @customElement
 * @extends {LitElement}
 * @appliesMixin CellsTemplateAnimationMixin
 * @demo demo/index.html
 * @hero cells-template-paper-drawer-panel.png
 */
class CellsTemplatePaperDrawerPanel extends CellsTemplateAnimationMixin(LitElement) {
  static get is() {
    return 'cells-template-paper-drawer-panel';
  }

  static get properties() {
    return {

      /**
       * If true, position the drawer to the right.
       */
      rightDrawer: {
        type: Boolean,
        attribute: 'right-drawer'
      },

      /**
       * Hides the header.
       */
      headerHidden: {
        type: Boolean,
        attribute: 'header-hidden'
      },

      /**
      * If true, swipe to open/close the drawer is disabled.
      */
      disableEdgeSwipe: {
        type: Boolean,
        attribute: 'disable-edge-swipe',
      },

      /**
      * If true, swipe to open/close the drawer is disabled.
      */
      disableSwipe: {
        type: Boolean,
        attribute: 'disable-swipe',
      },

      /**
       * How many pixels on the side of the screen are sensitive to edge swipes and peek.
       */
      edgeSwipeSensitivity: {
        type: Number,
        attribute: 'edge-swipe-sensitivity',
      },

      /**
       * Open menu with scale animation.
       */
      scaleContent: {
        type: Boolean,
        attribute: 'scale-content',
      },

      /**
       * Choose add css attribute position:relative in main content ('false', or 'true').
       */
      relativeMain: {
        type: Boolean,
        attribute: 'relative-main',
        reflect: true,
      },

      /**
       * The width of the drawer.
       */
      drawerWidth: {
        type: String,
        attribute: 'drawer-width',
      },

      /**
       * If true, the header is fixed to the top and never moves away.
       */
      headerFixed: {
        type: Boolean,
        attribute: 'header-fixed',
      },

      /**
       * Sets wheter to disable scrolling when the menu is opened.
       */
      disableScrollLock: {
        type: Boolean,
        attribute: 'disable-scroll-lock',
      },

      /**
       * Set to true to prevent reset the scroll in cached templates
       */
      disabledScrollerReset: {
        type: Boolean,
        attribute: 'disabled-scroller-reset',
      },

      /**
       * Selector of the template element that has the scrolling area
       */
      scrollerNode: {
        type: String,
        attribute: 'scroller-node'
      },

      /**
       * HTML element responsible for managing the scroll
       */
      _scrollerNode: {
        type: Object,
      },

      /**
      * Notifies number of configurations items
      */
      configurationsNumber: {
        type: Number,
        attribute: 'configurations-number'
      },
      /**
       * Footer height in px.
       * Can be set either by using a custom CSS property (--app__footer-height) or by setting
       * footerHeight. Default value for --app__footer-height is 60px.
       */
      footerHeight: {
        type: Number,
        attribute: 'footer-height'
      },
      /**
       * Set to true if the template has footer or coexists with a external footer
       */
      hasFooter: {
        type: Boolean,
        attribute: 'has-footer',
        reflect: true,
      },
      /**
       * If true, the footer is fixed to the bottom and never moves away.
       */
      footerFixed: {
        type: Boolean,
        attribute: 'footer-fixed',
        reflect: true,
      },
    };
  }

  constructor() {
    super();
    this.rightDrawer = false;
    this.headerHidden = false;
    this.disableEdgeSwipe = false;
    this.disableSwipe = false;
    this.edgeSwipeSensitivity = 20;
    this.scaleContent = false;
    this.relativeMain = false;
    this.drawerWidth = '100%';
    this.headerFixed = false;
    this.selected = null;
    this.menuOpened = false;
    this.disableScrollLock = false;
    this.disabledScrollerReset = false;
    this.scrollerNode = 'app__section';
    this.configurationsNumber = 0;
    this.hasFooter = false;
    this.footerFixed = false;
  }

  updated(changedProps) {
    super.updated(changedProps);
    if (changedProps.has('scrollerNode')) {
      this._scrollerNodeChanged(this.scrollerNode);
    }
    if (changedProps.has('configurationsNumber')) {
      this.dispatchEvent(new CustomEvent('configurations-number-changed', {
        detail: {
          value: this.configurationsNumber
        }
      }));
    }
    if (changedProps.has('hasFooter')) {
      this._setupFooter(this.hasFooter);
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.addEventListener('overlay-opening', this._removeOverflow.bind(this));
    this.addEventListener('overlay-closed', this._addOverflow.bind(this));
    this.addEventListener('toggle-menu', this.toggleMenu.bind(this));
    this.addEventListener('change-template-animation', this._onChangeAnimation.bind(this));
    this.setAttribute('data-template', '');
  }

  static get styles() {
    return [
      styles,
      getComponentSharedStyles('cells-template-paper-drawer-panel-shared-styles'),
      CellsTemplateAnimationMixinStyles
    ];
  }

  render() {
    return html`
      <cells-app-drawer
        id="app-container"
        class="app-container"
        force-narrow
        ?right-drawer="${this.rightDrawer}"
        drawer-width="${this.drawerWidth}"
        ?disable-swipe="${this.disableSwipe}"
        ?disable-edge-swipe="${this.disableEdgeSwipe}"
        edge-swipe-sensitivity="${this.edgeSwipeSensitivity}"
        @content-scroll="${this._onContentScroll}"
        @selected-changed="${this._onSelectedChanged}"
        ?scale-content=${this.scaleContent}>
        <cells-paper-scroll-header-panel
          ?fixed="${this.headerFixed}"
          class="app__section"
          id="app__section"
          main
          slot="main"
          header-height="${this.headerHeight}"
          configurations-number="${this.configurationsNumber}">
          <header class="app__header paper-header" id="app__header" ?hidden="${this.headerHidden}" slot="header-content">
            <slot name="app__header"></slot>
          </header>
          <div class="app__main app__scroller-list" id="app__main" slot="main-content">
            <slot name="app__main"></slot>
          </div>
        </cells-paper-scroll-header-panel>

        <footer class="app__footer" id="app__footer" slot="footer">
          <slot name="app__footer"></slot>
        </footer>

        <aside drawer id="app__complementary" class="app__complementary" slot="drawer">
          <slot name="app__complementary"></slot>
        </aside>
      </cells-app-drawer>

      <div class="app__overlay" id="app__overlay">
        <slot name="app__overlay"></slot>
      </div>

      <div class="app__transactional" id="app__transactional">
        <slot select="app__transactional"></slot>
      </div>
    `;
  }

  /**
   * Open/closes the menu panel
   */
  toggleMenu() {
    this.shadowRoot.querySelector('#app-container').togglePanel();
  }

  _setSelected(value) {
    this.selected = value;
    /**
     * Notifies changes on the selected value.
     * @event selected-changed
     */
    this.dispatchEvent(new CustomEvent('selected-changed', {
      detail: {
        value: this.selected
      }
    }));
  }

  _setMenuOpened(value) {
    this.menuOpened = value;
    if (this.menuOpened) {
      this.setAttribute('menu-opened', '');
    } else {
      this.removeAttribute('menu-opened');
    }
    /**
     * Notifies if the menu is opened or not.
     * @event menu-opened-changed
     */
    this.dispatchEvent(new CustomEvent('menu-opened-changed', {
      detail: {
        value: this.menuOpened
      }
    }));
  }

  _onSelectedChanged(e) {
    this._setSelected(e.detail.value);

    if (e.detail.value === 'drawer') {
      this._setMenuOpened(true);
      if (!this.disableScrollLock) {
        this._removeOverflow();
      }
    } else {
      this._setMenuOpened(false);
      if (!this.disableScrollLock) {
        this._addOverflow();
      }
    }
  }

  /**
   * Add scroll bar
   */
  _addOverflow() {
    this.classList.remove('overflow-initial');
  }

  /**
   * Remove scroll bar
   */
  _removeOverflow() {
    this.classList.add('overflow-initial');
  }

  /**
   * Fired when get scroll node. Sends the scroller node.
   *
   * @event scroller-control
   */
  _scrollerNodeChanged(scrollerControl) {
    const scrollerC = this.shadowRoot.querySelector(`#${scrollerControl}`);
    let scrollerControlNode = scrollerC ? scrollerC.scroller : '';
    this._scrollerNode = scrollerControlNode;
    this.dispatchEvent(new CustomEvent('scroller-control', {
      bubbles: true,
      composed: true,
      detail: scrollerControlNode,
    }));
  }

  _onChangeAnimation(ev) {
    ev.stopPropagation();
    this.animationType = ev.detail.animationType;
  }

  /**
   * Fired when the content has been scrolled.
   *
   * @event template-content-scroll
   */
  _onContentScroll(ev) {
    ev.stopPropagation();
    this.dispatchEvent(new CustomEvent('template-content-scroll', {
      bubbles: true,
      composed: true,
      detail: ev.detail,
    }));
  }

  _setupFooter(hasFooter) {
    const appSection = this.shadowRoot.querySelector('#app__section');
    if (hasFooter) {
      appSection.addEventListener('paper-header-transform', this._onHeaderTransform.bind(this));
      return;
    }
    appSection.removeEventListener('paper-header-transform', this._onHeaderTransform.bind(this));
    return;
  }

  _onHeaderTransform(e) {
    let y = e.detail.y || '';
    this._footer = this._footer || this.shadowRoot.querySelector('#app__footer');
    this._footer.style = 'transform: translateY(' + Math.abs(y) + 'px);';
  }
}
window.customElements.define(CellsTemplatePaperDrawerPanel.is, CellsTemplatePaperDrawerPanel);
