/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
import { LitElement, html } from 'lit-element';
import { CellsResizableMixin as cellsResizableMixin } from '../../cells-resizable-mixin.js';

class XPuck extends cellsResizableMixin(LitElement) {
  static get is() {
    return 'x-puck';
  }

  static get properties() {
    return {
      x: {
        type: Number
      },
      y: {
        type: Number
      }
    };
  }

  constructor() {
    super();
    this.x = 0;
    this.y = 0;
    this.addEventListener('cells-resize', this._onCellsResize);
  }

  connectedCallback() {
    super.connectedCallback();
    setTimeout(() => {
      this.notifyResize();
    }, 1);
  }

  get parent() {
    if (this.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      return this.parentNode.host;
    }

    return this.parentNode;
  }

  render() {
    return html`
      <style>
        :host {
          display: inline-block;
          border: 3px solid lightblue;
        }
      </style>

      <b>I'm a resize-aware, thirdifying puck at (<span>${this.x}</span> x <span>${this.y}</span>).</b>
    `;
  }

  _onCellsResize() {
    var x = this.x = Math.floor(this.parent.offsetWidth / 3);
    var y = this.y = Math.floor(this.parent.offsetHeight / 3);
    this.style.transform = `translate3d(${x}px, ${y}px, 0)`;
  }
}
customElements.define(XPuck.is, XPuck);
