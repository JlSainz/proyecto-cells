import { LitElement } from 'lit-element';

/*
* @customElement cells-element
* @demo demo/index.html
* @extends {LitElement}
* @hero cells-element.png
*/
export class CellsElement extends LitElement {

  static get DEBUG() {
    return false;
  }

  static _log (message) {
    return CellsElement.DEBUG && console.log(message);
  };

  static callCellsBridge(args) {
    const [command, ...parameters] = args;

    // cells is ready
    if (window.cells) {
      if (!window.cells[command]) {
        throw new Error(`WARNING: Invalid cells bridge command execution: ${command}.`);
      }

      const result = window.cells[command](...parameters);
      this._log(`Executing bridge command: ${command}.`);
      return result;
    }

    window.cellsBridgeQueue = window.cellsBridgeQueue || [];
    window.cellsBridgeQueue.push({ command, parameters });
    this._log(`Pushing bridge command execution to queue: ${command}.`);
  };


  static get is() {
    return 'cells-element';
  }

  // Initialize properties
  constructor() {
    super();
  }

  subscribe(channelName, callback) {
    this.__callCellsBridge('registerInConnection', channelName, this, callback);
  }

  unsubscribe(channels) {
    this.__callCellsBridge('unsubscribe', channels, this);
  }

  publish(channelName, value, options = {}) {
    this.__callCellsBridge('publish', channelName, value, options);
  }

  publishOn(channelName, htmlElement, eventName) {
    this.__callCellsBridge('registerOutConnection', channelName, htmlElement, eventName);
  }

  navigate(page, params) {
    this.__callCellsBridge('navigate', page, params);
  }

  // analytics
  trackEvent(data) {
    this.__callCellsBridge('trackEvent', data);
  }

  // native
  navigateToNative(page, params) {
    this.__callCellsBridge('navigateToNative', page, params);
  }

  backStep() {
    this.__callCellsBridge('backStep');
  }

  // monitoring
  log(log) {
    this.__callCellsBridge('log', log);
  }

  ingest(spans) {
    this.__callCellsBridge('ingest', spans);
  }

  createSpan(data) {
    return this.__callCellsBridge('createSpan', data);
  }

  createUUID() {
    return this.__callCellsBridge('createUUID');
  }

  // wrapper just for testing purposes
  __callCellsBridge(...args) {
    return CellsElement.callCellsBridge(args);
  }

}

// Register the element with the browser
customElements.define(CellsElement.is, CellsElement);

