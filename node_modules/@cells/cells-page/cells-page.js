import { CellsElement } from '@cells/cells-element';

/*
* @customElement cells-page
* @demo demo/index.html
* @extends {CellsElement}
* @hero cells-element.png
*/
export class CellsPage extends CellsElement {

  static get BRIDGE_PAGE_PRIVATE_CHANNEL_PREFIX()Â {
    return '__bridge_page_';
  }

  static getPagePrivateChannel(tagName) {
    return `${CellsPage.BRIDGE_PAGE_PRIVATE_CHANNEL_PREFIX}${tagName.toLowerCase().replace('-page', '')}`;
  }

  static get is() {
    return 'cells-page';
  }

  // Declare properties
  static get properties() {
    return {
      params: { type: Object },
    };
  }

  // Initialize properties
  constructor() {
    super();
    this.params = {};
  }

  connectedCallback(){
    super.connectedCallback();
    this.__handleConnections();
  }

  __handleConnections() {
    if (this.__hasPageHandlers()) {
      this.__handlePagePrivateChannel();
    }
  }

  __hasPageHandlers() {
    return !!this.onPageEnter || !!this.onPageLeave;
  }

  __handlePagePrivateChannel() {
    const channelName = CellsPage.getPagePrivateChannel(this.tagName);
    const wrappedPrivateChannelCallback = this.__wrapPrivateChannelCallback();

    this.subscribe(channelName, wrappedPrivateChannelCallback);
  }

  __wrapPrivateChannelCallback() {
    return ({ value: pageStatusValue }) => {
      const callback = () => pageStatusValue ? this.onPageEnter && this.onPageEnter() : this.onPageLeave && this.onPageLeave();

      if (callback) {
        callback();
      }
    };
  }

}

// Register the element with the browser
customElements.define(CellsPage.is, CellsPage);
